/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MoxieTokenLockManagerInterface extends ethers.utils.Interface {
  functions: {
    "addSubjectTokenDestination(address)": FunctionFragment;
    "addTokenDestination(address)": FunctionFragment;
    "authFnCalls(bytes4)": FunctionFragment;
    "createTokenLockWallet(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getAuthFunctionCallTarget(bytes4)": FunctionFragment;
    "getDeploymentAddress(bytes32,address,address)": FunctionFragment;
    "getSubjectTokenAddress(address)": FunctionFragment;
    "getSubjectTokenDestinations()": FunctionFragment;
    "getTokenDestinations()": FunctionFragment;
    "isAuthFunctionCall(bytes4)": FunctionFragment;
    "isSubjectTokenDestination(address)": FunctionFragment;
    "isTokenDestination(address)": FunctionFragment;
    "masterCopy()": FunctionFragment;
    "moxiePassToken()": FunctionFragment;
    "moxiePassTokenUri()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeSubjectTokenDestination(address)": FunctionFragment;
    "removeTokenDestination(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuthFunctionCall(string,address)": FunctionFragment;
    "setAuthFunctionCallMany(string[],address[])": FunctionFragment;
    "setMasterCopy(address)": FunctionFragment;
    "setMoxiePassTokenAndUri(address,string)": FunctionFragment;
    "setTokenManager(address)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenManager()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsetAuthFunctionCall(string)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSubjectTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authFnCalls",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenLockWallet",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthFunctionCallTarget",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeploymentAddress",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectTokenDestinations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDestinations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthFunctionCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubjectTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterCopy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moxiePassToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moxiePassTokenUri",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSubjectTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenDestination",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthFunctionCall",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthFunctionCallMany",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterCopy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMoxiePassTokenAndUri",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenManager",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetAuthFunctionCall",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSubjectTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authFnCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenLockWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuthFunctionCallTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeploymentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectTokenDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDestinations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubjectTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterCopy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moxiePassToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moxiePassTokenUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSubjectTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenDestination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthFunctionCallMany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterCopy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMoxiePassTokenAndUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetAuthFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FunctionCallAuth(address,bytes4,address,string)": EventFragment;
    "MasterCopyUpdated(address)": EventFragment;
    "MoxiePassTokenUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProxyCreated(address)": EventFragment;
    "SubjectTokenDestinationAllowed(address,bool)": EventFragment;
    "TokenDestinationAllowed(address,bool)": EventFragment;
    "TokenLockCreated(address,bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "TokenManagerUpdated(address)": EventFragment;
    "TokensDeposited(address,uint256)": EventFragment;
    "TokensWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FunctionCallAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterCopyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MoxiePassTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubjectTokenDestinationAllowed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDestinationAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLockCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
}

export type FunctionCallAuthEvent = TypedEvent<
  [string, string, string, string] & {
    caller: string;
    sigHash: string;
    target: string;
    signature: string;
  }
>;

export type MasterCopyUpdatedEvent = TypedEvent<
  [string] & { masterCopy: string }
>;

export type MoxiePassTokenUpdatedEvent = TypedEvent<
  [string] & { moxiePassToken: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProxyCreatedEvent = TypedEvent<[string] & { proxy: string }>;

export type SubjectTokenDestinationAllowedEvent = TypedEvent<
  [string, boolean] & { dst: string; allowed: boolean }
>;

export type TokenDestinationAllowedEvent = TypedEvent<
  [string, boolean] & { dst: string; allowed: boolean }
>;

export type TokenLockCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    contractAddress: string;
    initHash: string;
    beneficiary: string;
    token: string;
    managedAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    periods: BigNumber;
    releaseStartTime: BigNumber;
    vestingCliffTime: BigNumber;
    revocable: number;
  }
>;

export type TokenManagerUpdatedEvent = TypedEvent<
  [string] & { tokenManager: string }
>;

export type TokensDepositedEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export type TokensWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { sender: string; amount: BigNumber }
>;

export class MoxieTokenLockManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MoxieTokenLockManagerInterface;

  functions: {
    addSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authFnCalls(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    createTokenLockWallet(
      _owner: string,
      _beneficiary: string,
      _managedAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _periods: BigNumberish,
      _releaseStartTime: BigNumberish,
      _vestingCliffTime: BigNumberish,
      _revocable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuthFunctionCallTarget(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDeploymentAddress(bytes32,address,address)"(
      _salt: BytesLike,
      _implementation: string,
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDeploymentAddress(bytes32,address)"(
      _salt: BytesLike,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubjectTokenAddress(
      _subject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSubjectTokenDestinations(overrides?: CallOverrides): Promise<[string[]]>;

    getTokenDestinations(overrides?: CallOverrides): Promise<[string[]]>;

    isAuthFunctionCall(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterCopy(overrides?: CallOverrides): Promise<[string]>;

    moxiePassToken(overrides?: CallOverrides): Promise<[string]>;

    moxiePassTokenUri(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthFunctionCall(
      _signature: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthFunctionCallMany(
      _signatures: string[],
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMoxiePassTokenAndUri(
      _moxiePassToken: string,
      _moxiePassTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenManager(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unsetAuthFunctionCall(
      _signature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSubjectTokenDestination(
    _dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTokenDestination(
    _dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authFnCalls(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  createTokenLockWallet(
    _owner: string,
    _beneficiary: string,
    _managedAmount: BigNumberish,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _periods: BigNumberish,
    _releaseStartTime: BigNumberish,
    _vestingCliffTime: BigNumberish,
    _revocable: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuthFunctionCallTarget(
    _sigHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDeploymentAddress(bytes32,address,address)"(
    _salt: BytesLike,
    _implementation: string,
    _deployer: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDeploymentAddress(bytes32,address)"(
    _salt: BytesLike,
    _implementation: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubjectTokenAddress(
    _subject: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSubjectTokenDestinations(overrides?: CallOverrides): Promise<string[]>;

  getTokenDestinations(overrides?: CallOverrides): Promise<string[]>;

  isAuthFunctionCall(
    _sigHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubjectTokenDestination(
    _dst: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTokenDestination(_dst: string, overrides?: CallOverrides): Promise<boolean>;

  masterCopy(overrides?: CallOverrides): Promise<string>;

  moxiePassToken(overrides?: CallOverrides): Promise<string>;

  moxiePassTokenUri(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeSubjectTokenDestination(
    _dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTokenDestination(
    _dst: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthFunctionCall(
    _signature: string,
    _target: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthFunctionCallMany(
    _signatures: string[],
    _targets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMasterCopy(
    _masterCopy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMoxiePassTokenAndUri(
    _moxiePassToken: string,
    _moxiePassTokenUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenManager(
    _tokenManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenManager(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unsetAuthFunctionCall(
    _signature: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenDestination(_dst: string, overrides?: CallOverrides): Promise<void>;

    authFnCalls(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    createTokenLockWallet(
      _owner: string,
      _beneficiary: string,
      _managedAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _periods: BigNumberish,
      _releaseStartTime: BigNumberish,
      _vestingCliffTime: BigNumberish,
      _revocable: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getAuthFunctionCallTarget(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDeploymentAddress(bytes32,address,address)"(
      _salt: BytesLike,
      _implementation: string,
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDeploymentAddress(bytes32,address)"(
      _salt: BytesLike,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubjectTokenAddress(
      _subject: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubjectTokenDestinations(overrides?: CallOverrides): Promise<string[]>;

    getTokenDestinations(overrides?: CallOverrides): Promise<string[]>;

    isAuthFunctionCall(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterCopy(overrides?: CallOverrides): Promise<string>;

    moxiePassToken(overrides?: CallOverrides): Promise<string>;

    moxiePassTokenUri(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuthFunctionCall(
      _signature: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthFunctionCallMany(
      _signatures: string[],
      _targets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMoxiePassTokenAndUri(
      _moxiePassToken: string,
      _moxiePassTokenUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenManager(
      _tokenManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenManager(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetAuthFunctionCall(
      _signature: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FunctionCallAuth(address,bytes4,address,string)"(
      caller?: string | null,
      sigHash?: BytesLike | null,
      target?: string | null,
      signature?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { caller: string; sigHash: string; target: string; signature: string }
    >;

    FunctionCallAuth(
      caller?: string | null,
      sigHash?: BytesLike | null,
      target?: string | null,
      signature?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { caller: string; sigHash: string; target: string; signature: string }
    >;

    "MasterCopyUpdated(address)"(
      masterCopy?: string | null
    ): TypedEventFilter<[string], { masterCopy: string }>;

    MasterCopyUpdated(
      masterCopy?: string | null
    ): TypedEventFilter<[string], { masterCopy: string }>;

    "MoxiePassTokenUpdated(address)"(
      moxiePassToken?: string | null
    ): TypedEventFilter<[string], { moxiePassToken: string }>;

    MoxiePassTokenUpdated(
      moxiePassToken?: string | null
    ): TypedEventFilter<[string], { moxiePassToken: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProxyCreated(address)"(
      proxy?: string | null
    ): TypedEventFilter<[string], { proxy: string }>;

    ProxyCreated(
      proxy?: string | null
    ): TypedEventFilter<[string], { proxy: string }>;

    "SubjectTokenDestinationAllowed(address,bool)"(
      dst?: string | null,
      allowed?: null
    ): TypedEventFilter<[string, boolean], { dst: string; allowed: boolean }>;

    SubjectTokenDestinationAllowed(
      dst?: string | null,
      allowed?: null
    ): TypedEventFilter<[string, boolean], { dst: string; allowed: boolean }>;

    "TokenDestinationAllowed(address,bool)"(
      dst?: string | null,
      allowed?: null
    ): TypedEventFilter<[string, boolean], { dst: string; allowed: boolean }>;

    TokenDestinationAllowed(
      dst?: string | null,
      allowed?: null
    ): TypedEventFilter<[string, boolean], { dst: string; allowed: boolean }>;

    "TokenLockCreated(address,bytes32,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint8)"(
      contractAddress?: string | null,
      initHash?: BytesLike | null,
      beneficiary?: string | null,
      token?: null,
      managedAmount?: null,
      startTime?: null,
      endTime?: null,
      periods?: null,
      releaseStartTime?: null,
      vestingCliffTime?: null,
      revocable?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ],
      {
        contractAddress: string;
        initHash: string;
        beneficiary: string;
        token: string;
        managedAmount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        periods: BigNumber;
        releaseStartTime: BigNumber;
        vestingCliffTime: BigNumber;
        revocable: number;
      }
    >;

    TokenLockCreated(
      contractAddress?: string | null,
      initHash?: BytesLike | null,
      beneficiary?: string | null,
      token?: null,
      managedAmount?: null,
      startTime?: null,
      endTime?: null,
      periods?: null,
      releaseStartTime?: null,
      vestingCliffTime?: null,
      revocable?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ],
      {
        contractAddress: string;
        initHash: string;
        beneficiary: string;
        token: string;
        managedAmount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        periods: BigNumber;
        releaseStartTime: BigNumber;
        vestingCliffTime: BigNumber;
        revocable: number;
      }
    >;

    "TokenManagerUpdated(address)"(
      tokenManager?: string | null
    ): TypedEventFilter<[string], { tokenManager: string }>;

    TokenManagerUpdated(
      tokenManager?: string | null
    ): TypedEventFilter<[string], { tokenManager: string }>;

    "TokensDeposited(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    TokensDeposited(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    "TokensWithdrawn(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;

    TokensWithdrawn(
      sender?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    addSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authFnCalls(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    createTokenLockWallet(
      _owner: string,
      _beneficiary: string,
      _managedAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _periods: BigNumberish,
      _releaseStartTime: BigNumberish,
      _vestingCliffTime: BigNumberish,
      _revocable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuthFunctionCallTarget(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeploymentAddress(bytes32,address,address)"(
      _salt: BytesLike,
      _implementation: string,
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeploymentAddress(bytes32,address)"(
      _salt: BytesLike,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubjectTokenAddress(
      _subject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSubjectTokenDestinations(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenDestinations(overrides?: CallOverrides): Promise<BigNumber>;

    isAuthFunctionCall(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterCopy(overrides?: CallOverrides): Promise<BigNumber>;

    moxiePassToken(overrides?: CallOverrides): Promise<BigNumber>;

    moxiePassTokenUri(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthFunctionCall(
      _signature: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthFunctionCallMany(
      _signatures: string[],
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMoxiePassTokenAndUri(
      _moxiePassToken: string,
      _moxiePassTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenManager(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unsetAuthFunctionCall(
      _signature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authFnCalls(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTokenLockWallet(
      _owner: string,
      _beneficiary: string,
      _managedAmount: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _periods: BigNumberish,
      _releaseStartTime: BigNumberish,
      _vestingCliffTime: BigNumberish,
      _revocable: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuthFunctionCallTarget(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeploymentAddress(bytes32,address,address)"(
      _salt: BytesLike,
      _implementation: string,
      _deployer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeploymentAddress(bytes32,address)"(
      _salt: BytesLike,
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubjectTokenAddress(
      _subject: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSubjectTokenDestinations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenDestinations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthFunctionCall(
      _sigHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubjectTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenDestination(
      _dst: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterCopy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moxiePassToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moxiePassTokenUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSubjectTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTokenDestination(
      _dst: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthFunctionCall(
      _signature: string,
      _target: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthFunctionCallMany(
      _signatures: string[],
      _targets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMasterCopy(
      _masterCopy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMoxiePassTokenAndUri(
      _moxiePassToken: string,
      _moxiePassTokenUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenManager(
      _tokenManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unsetAuthFunctionCall(
      _signature: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
