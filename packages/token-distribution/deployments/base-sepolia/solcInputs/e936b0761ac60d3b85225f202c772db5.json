{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n        address addr;\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n        return addr;\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n        bytes32 _data = keccak256(\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n        );\n        return address(uint160(uint256(_data)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/IERC721Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Mintable is IERC721{\n\n    function mint(address to) external;\n\n}\n"
    },
    "contracts/IMoxieTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMoxieTokenLock {\n    enum Revocability {\n        NotSet,\n        Enabled,\n        Disabled\n    }\n\n    // -- Balances --\n\n    function currentBalance() external view returns (uint256);\n\n    // -- Time & Periods --\n\n    function currentTime() external view returns (uint256);\n\n    function duration() external view returns (uint256);\n\n    function sinceStartTime() external view returns (uint256);\n\n    function amountPerPeriod() external view returns (uint256);\n\n    function periodDuration() external view returns (uint256);\n\n    function currentPeriod() external view returns (uint256);\n\n    function passedPeriods() external view returns (uint256);\n\n    // -- Locking & Release Schedule --\n\n    function availableAmount() external view returns (uint256);\n\n    function vestedAmount() external view returns (uint256);\n\n    function releasableAmount() external view returns (uint256);\n\n    function totalOutstandingAmount() external view returns (uint256);\n\n    function surplusAmount() external view returns (uint256);\n\n    // -- Value Transfer --\n\n    function release() external;\n\n    function withdrawSurplus(uint256 _amount) external;\n\n    function revoke() external;\n}\n"
    },
    "contracts/IMoxieTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IMoxieTokenLock.sol\";\n\ninterface IMoxieTokenLockManager {\n    // -- Factory --\n\n    function setMasterCopy(address _masterCopy) external;\n\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IMoxieTokenLock.Revocability _revocable\n    ) external;\n\n    // -- Funds Management --\n\n    function token() external returns (IERC20);\n\n    function deposit(uint256 _amount) external;\n\n    function withdraw(uint256 _amount) external;\n\n    // -- Allowed Funds Destinations --\n\n    function addTokenDestination(address _dst) external;\n\n    function removeTokenDestination(address _dst) external;\n\n    function isTokenDestination(address _dst) external view returns (bool);\n\n    function getTokenDestinations() external view returns (address[] memory);\n\n    // -- Function Call Authorization --\n\n    function setAuthFunctionCall(string calldata _signature, address _target) external;\n\n    function unsetAuthFunctionCall(string calldata _signature) external;\n\n    function setAuthFunctionCallMany(string[] calldata _signatures, address[] calldata _targets) external;\n\n    function getAuthFunctionCallTarget(bytes4 _sigHash) external view returns (address);\n\n    function isAuthFunctionCall(bytes4 _sigHash) external view returns (bool);\n}\n"
    },
    "contracts/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nlibrary MathUtils {\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"
    },
    "contracts/MinimalProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\nimport { Create2 } from \"@openzeppelin/contracts/utils/Create2.sol\";\n\n/**\n * @title MinimalProxyFactory: a factory contract for creating minimal proxies\n * @notice Adapted from https://github.com/OpenZeppelin/openzeppelin-sdk/blob/v2.5.0/packages/lib/contracts/upgradeability/ProxyFactory.sol\n * Based on https://eips.ethereum.org/EIPS/eip-1167\n */\ncontract MinimalProxyFactory {\n    /// @dev Emitted when a new proxy is created\n    event ProxyCreated(address indexed proxy);\n\n    /**\n     * @notice Gets the deterministic CREATE2 address for MinimalProxy with a particular implementation\n     * @dev Uses address(this) as deployer to compute the address. Only for backwards compatibility.\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @return Address of the counterfactual MinimalProxy\n     */\n    function getDeploymentAddress(bytes32 _salt, address _implementation) public view returns (address) {\n        return getDeploymentAddress(_salt, _implementation, address(this));\n    }\n\n    /**\n     * @notice Gets the deterministic CREATE2 address for MinimalProxy with a particular implementation\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @param _deployer Address of the deployer that creates the contract\n     * @return Address of the counterfactual MinimalProxy\n     */\n    function getDeploymentAddress(\n        bytes32 _salt,\n        address _implementation,\n        address _deployer\n    ) public pure returns (address) {\n        return Create2.computeAddress(_salt, keccak256(_getContractCreationCode(_implementation)), _deployer);\n    }\n\n    /**\n     * @dev Deploys a MinimalProxy with CREATE2\n     * @param _salt Bytes32 salt to use for CREATE2\n     * @param _implementation Address of the proxy target implementation\n     * @param _data Bytes with the initializer call\n     * @return Address of the deployed MinimalProxy\n     */\n    function _deployProxy2(bytes32 _salt, address _implementation, bytes memory _data) internal returns (address) {\n        address proxyAddress = Create2.deploy(0, _salt, _getContractCreationCode(_implementation));\n\n        emit ProxyCreated(proxyAddress);\n\n        // Call function with data\n        if (_data.length > 0) {\n            Address.functionCall(proxyAddress, _data);\n        }\n\n        return proxyAddress;\n    }\n\n    /**\n     * @dev Gets the MinimalProxy bytecode\n     * @param _implementation Address of the proxy target implementation\n     * @return MinimalProxy bytecode\n     */\n    function _getContractCreationCode(address _implementation) internal pure returns (bytes memory) {\n        bytes10 creation = 0x3d602d80600a3d3981f3;\n        bytes10 prefix = 0x363d3d373d3d3d363d73;\n        bytes20 targetBytes = bytes20(_implementation);\n        bytes15 suffix = 0x5af43d82803e903d91602b57fd5bf3;\n        return abi.encodePacked(creation, prefix, targetBytes, suffix);\n    }\n}\n"
    },
    "contracts/MoxieTokenLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport { Ownable as OwnableInitializable } from \"./Ownable.sol\";\nimport \"./MathUtils.sol\";\nimport \"./IMoxieTokenLock.sol\";\n\n/**\n * @title MoxieTokenLock\n * @notice Contract that manages an unlocking schedule of tokens.\n * @dev The contract lock manage a number of tokens deposited into the contract to ensure that\n * they can only be released under certain time conditions.\n *\n * This contract implements a release scheduled based on periods and tokens are released in steps\n * after each period ends. It can be configured with one period in which case it is like a plain TimeLock.\n * It also supports revocation to be used for vesting schedules.\n *\n * The contract supports receiving extra funds than the managed tokens ones that can be\n * withdrawn by the beneficiary at any time.\n *\n * A releaseStartTime parameter is included to override the default release schedule and\n * perform the first release on the configured time. After that it will continue with the\n * default schedule.\n */\nabstract contract MoxieTokenLock is OwnableInitializable, IMoxieTokenLock {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MIN_PERIOD = 1;\n\n    // -- State --\n\n    IERC20 public token;\n    address public beneficiary;\n\n    // Configuration\n\n    // Amount of tokens managed by the contract schedule\n    uint256 public managedAmount;\n\n    uint256 public startTime; // Start datetime (in unixtimestamp)\n    uint256 public endTime; // Datetime after all funds are fully vested/unlocked (in unixtimestamp)\n    uint256 public periods; // Number of vesting/release periods\n\n    // First release date for tokens (in unixtimestamp)\n    // If set, no tokens will be released before releaseStartTime ignoring\n    // the amount to release each period\n    uint256 public releaseStartTime;\n    // A cliff set a date to which a beneficiary needs to get to vest\n    // all preceding periods\n    uint256 public vestingCliffTime;\n    Revocability public revocable; // Whether to use vesting for locked funds\n\n    // State\n\n    bool public isRevoked;\n    bool public isInitialized;\n    bool public isAccepted;\n    uint256 public releasedAmount;\n    uint256 public revokedAmount;\n\n    // -- Events --\n\n    event TokensReleased(address indexed beneficiary, uint256 amount);\n    event TokensWithdrawn(address indexed beneficiary, uint256 amount);\n    event TokensRevoked(address indexed beneficiary, uint256 amount);\n    event BeneficiaryChanged(address newBeneficiary);\n    event LockAccepted();\n    event LockCanceled();\n\n    /**\n     * @dev Only allow calls from the beneficiary of the contract\n     */\n    modifier onlyBeneficiary() {\n        require(msg.sender == beneficiary, \"!auth\");\n        _;\n    }\n\n    /**\n     * @notice Initializes the contract\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _vestingCliffTime Override time for when the vesting start\n     * @param _revocable Whether the contract is revocable\n     */\n    function _initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) internal {\n        require(!isInitialized, \"Already initialized\");\n        require(_owner != address(0), \"Owner cannot be zero\");\n        require(_beneficiary != address(0), \"Beneficiary cannot be zero\");\n        require(_token != address(0), \"Token cannot be zero\");\n        require(_managedAmount > 0, \"Managed tokens cannot be zero\");\n        require(_startTime != 0, \"Start time must be set\");\n        require(_startTime < _endTime, \"Start time > end time\");\n        require(_periods >= MIN_PERIOD, \"Periods cannot be below minimum\");\n        require(_revocable != Revocability.NotSet, \"Must set a revocability option\");\n        require(_releaseStartTime < _endTime, \"Release start time must be before end time\");\n        require(_vestingCliffTime < _endTime, \"Cliff time must be before end time\");\n\n        isInitialized = true;\n\n        OwnableInitializable._initialize(_owner);\n        beneficiary = _beneficiary;\n        token = IERC20(_token);\n\n        managedAmount = _managedAmount;\n\n        startTime = _startTime;\n        endTime = _endTime;\n        periods = _periods;\n\n        // Optionals\n        releaseStartTime = _releaseStartTime;\n        vestingCliffTime = _vestingCliffTime;\n        revocable = _revocable;\n    }\n\n    /**\n     * @notice Change the beneficiary of funds managed by the contract\n     * @dev Can only be called by the beneficiary\n     * @param _newBeneficiary Address of the new beneficiary address\n     */\n    function changeBeneficiary(address _newBeneficiary) external onlyBeneficiary {\n        require(_newBeneficiary != address(0), \"Empty beneficiary\");\n        beneficiary = _newBeneficiary;\n        emit BeneficiaryChanged(_newBeneficiary);\n    }\n\n    /**\n     * @notice Beneficiary accepts the lock, the owner cannot retrieve back the tokens\n     * @dev Can only be called by the beneficiary\n     */\n    function acceptLock() external onlyBeneficiary {\n        isAccepted = true;\n        emit LockAccepted();\n    }\n\n    /**\n     * @notice Owner cancel the lock and return the balance in the contract\n     * @dev Can only be called by the owner\n     */\n    function cancelLock() external onlyOwner {\n        require(isAccepted == false, \"Cannot cancel accepted contract\");\n\n        token.safeTransfer(owner(), currentBalance());\n\n        emit LockCanceled();\n    }\n\n    // -- Balances --\n\n    /**\n     * @notice Returns the amount of tokens currently held by the contract\n     * @return Tokens held in the contract\n     */\n    function currentBalance() public view override returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    // -- Time & Periods --\n\n    /**\n     * @notice Returns the current block timestamp\n     * @return Current block timestamp\n     */\n    function currentTime() public view override returns (uint256) {\n        return block.timestamp;\n    }\n\n    /**\n     * @notice Gets duration of contract from start to end in seconds\n     * @return Amount of seconds from contract startTime to endTime\n     */\n    function duration() public view override returns (uint256) {\n        return endTime.sub(startTime);\n    }\n\n    /**\n     * @notice Gets time elapsed since the start of the contract\n     * @dev Returns zero if called before conctract starTime\n     * @return Seconds elapsed from contract startTime\n     */\n    function sinceStartTime() public view override returns (uint256) {\n        uint256 current = currentTime();\n        if (current <= startTime) {\n            return 0;\n        }\n        return current.sub(startTime);\n    }\n\n    /**\n     * @notice Returns amount available to be released after each period according to schedule\n     * @return Amount of tokens available after each period\n     */\n    function amountPerPeriod() public view override returns (uint256) {\n        return managedAmount.div(periods);\n    }\n\n    /**\n     * @notice Returns the duration of each period in seconds\n     * @return Duration of each period in seconds\n     */\n    function periodDuration() public view override returns (uint256) {\n        return duration().div(periods);\n    }\n\n    /**\n     * @notice Gets the current period based on the schedule\n     * @return A number that represents the current period\n     */\n    function currentPeriod() public view override returns (uint256) {\n        return sinceStartTime().div(periodDuration()).add(MIN_PERIOD);\n    }\n\n    /**\n     * @notice Gets the number of periods that passed since the first period\n     * @return A number of periods that passed since the schedule started\n     */\n    function passedPeriods() public view override returns (uint256) {\n        return currentPeriod().sub(MIN_PERIOD);\n    }\n\n    // -- Locking & Release Schedule --\n\n    /**\n     * @notice Gets the currently available token according to the schedule\n     * @dev Implements the step-by-step schedule based on periods for available tokens\n     * @return Amount of tokens available according to the schedule\n     */\n    function availableAmount() public view override returns (uint256) {\n        uint256 current = currentTime();\n\n        // Before contract start no funds are available\n        if (current < startTime) {\n            return 0;\n        }\n\n        // After contract ended all funds are available\n        if (current > endTime) {\n            return managedAmount;\n        }\n\n        // Get available amount based on period\n        return passedPeriods().mul(amountPerPeriod());\n    }\n\n    /**\n     * @notice Gets the amount of currently vested tokens\n     * @dev Similar to available amount, but is fully vested when contract is non-revocable\n     * @return Amount of tokens already vested\n     */\n    function vestedAmount() public view override returns (uint256) {\n        // If non-revocable it is fully vested\n        if (revocable == Revocability.Disabled) {\n            return managedAmount;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        if (vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        return availableAmount();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule and takes into account already released tokens\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view virtual override returns (uint256) {\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        uint256 releasable = availableAmount().sub(releasedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Gets the outstanding amount yet to be released based on the whole contract lifetime\n     * @dev Does not consider schedule but just global amounts tracked\n     * @return Amount of outstanding tokens for the lifetime of the contract\n     */\n    function totalOutstandingAmount() public view override returns (uint256) {\n        return managedAmount.sub(releasedAmount).sub(revokedAmount);\n    }\n\n    /**\n     * @notice Gets surplus amount in the contract based on outstanding amount to release\n     * @dev All funds over outstanding amount is considered surplus that can be withdrawn by beneficiary.\n     * Note this might not be the correct value for wallets transferred to L2 (i.e. an L2MoxieTokenLockWallet), as the released amount will be\n     * skewed, so the beneficiary might have to bridge back to L1 to release the surplus.\n     * @return Amount of tokens considered as surplus\n     */\n    function surplusAmount() public view override returns (uint256) {\n        uint256 balance = currentBalance();\n        uint256 outstandingAmount = totalOutstandingAmount();\n        if (balance > outstandingAmount) {\n            return balance.sub(outstandingAmount);\n        }\n        return 0;\n    }\n\n    // -- Value Transfer --\n\n    /**\n     * @notice Releases tokens based on the configured schedule\n     * @dev All available releasable tokens are transferred to beneficiary\n     */\n    function release() external override onlyBeneficiary {\n        uint256 amountToRelease = releasableAmount();\n        require(amountToRelease > 0, \"No available releasable amount\");\n\n        releasedAmount = releasedAmount.add(amountToRelease);\n\n        token.safeTransfer(beneficiary, amountToRelease);\n\n        emit TokensReleased(beneficiary, amountToRelease);\n    }\n\n    /**\n     * @notice Withdraws surplus, unmanaged tokens from the contract\n     * @dev Tokens in the contract over outstanding amount are considered as surplus\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdrawSurplus(uint256 _amount) external override onlyBeneficiary {\n        require(_amount > 0, \"Amount cannot be zero\");\n        require(surplusAmount() >= _amount, \"Amount requested > surplus available\");\n\n        token.safeTransfer(beneficiary, _amount);\n\n        emit TokensWithdrawn(beneficiary, _amount);\n    }\n\n    /**\n     * @notice Revokes a vesting schedule and return the unvested tokens to the owner\n     * @dev Vesting schedule is always calculated based on managed tokens\n     */\n    function revoke() external override onlyOwner {\n        require(revocable == Revocability.Enabled, \"Contract is non-revocable\");\n        require(isRevoked == false, \"Already revoked\");\n\n        uint256 unvestedAmount = managedAmount.sub(vestedAmount());\n        require(unvestedAmount > 0, \"No available unvested amount\");\n\n        revokedAmount = unvestedAmount;\n        isRevoked = true;\n\n        token.safeTransfer(owner(), unvestedAmount);\n\n        emit TokensRevoked(beneficiary, unvestedAmount);\n    }\n}\n"
    },
    "contracts/MoxieTokenLockManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MinimalProxyFactory.sol\";\nimport \"./IMoxieTokenLockManager.sol\";\nimport { MoxieTokenLockWallet } from \"./MoxieTokenLockWallet.sol\";\nimport \"./IERC721Mintable.sol\";\n\n/**\n * @title MoxieTokenLockManager\n * @notice This contract manages a list of authorized function calls and targets that can be called\n * by any TokenLockWallet contract and it is a factory of TokenLockWallet contracts.\n *\n * This contract receives funds to make the process of creating TokenLockWallet contracts\n * easier by distributing them the initial tokens to be managed.\n *\n * The owner can setup a list of token destinations that will be used by TokenLock contracts to\n * approve the pulling of funds, this way in can be guaranteed that only protocol contracts\n * will manipulate users funds.\n */\ncontract MoxieTokenLockManager is Ownable, MinimalProxyFactory, IMoxieTokenLockManager {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    // -- State --\n\n    mapping(bytes4 => address) public authFnCalls;\n    EnumerableSet.AddressSet private _tokenDestinations;\n\n    address public masterCopy;\n    IERC20 internal _token;\n    IERC721Mintable internal _moxiePassToken;\n\n    // -- Events --\n\n    event MasterCopyUpdated(address indexed masterCopy);\n    event TokenLockCreated(\n        address indexed contractAddress,\n        bytes32 indexed initHash,\n        address indexed beneficiary,\n        address token,\n        uint256 managedAmount,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 periods,\n        uint256 releaseStartTime,\n        uint256 vestingCliffTime,\n        IMoxieTokenLock.Revocability revocable\n    );\n\n    event TokensDeposited(address indexed sender, uint256 amount);\n    event TokensWithdrawn(address indexed sender, uint256 amount);\n\n    event FunctionCallAuth(address indexed caller, bytes4 indexed sigHash, address indexed target, string signature);\n    event TokenDestinationAllowed(address indexed dst, bool allowed);\n    event MoxiePassTokenUpdated(address indexed moxiePassToken);\n\n    /**\n     * Constructor.\n     * @param _MoxieToken Token to use for deposits and withdrawals\n     * @param _masterCopy Address of the master copy to use to clone proxies\n     */\n    constructor(IERC20 _MoxieToken, address _masterCopy) {\n        require(address(_MoxieToken) != address(0), \"Token cannot be zero\");\n        _token = _MoxieToken;\n        setMasterCopy(_masterCopy);\n    }\n\n    // -- Factory --\n\n    /**\n     * @notice Sets the masterCopy bytecode to use to create clones of TokenLock contracts\n     * @param _masterCopy Address of contract bytecode to factory clone\n     */\n    function setMasterCopy(address _masterCopy) public override onlyOwner {\n        require(_masterCopy != address(0), \"MasterCopy cannot be zero\");\n        masterCopy = _masterCopy;\n        emit MasterCopyUpdated(_masterCopy);\n    }\n\n    /**\n     * @notice Creates and fund a new token lock wallet using a minimum proxy\n     * @param _owner Address of the contract owner\n     * @param _beneficiary Address of the beneficiary of locked tokens\n     * @param _managedAmount Amount of tokens to be managed by the lock contract\n     * @param _startTime Start time of the release schedule\n     * @param _endTime End time of the release schedule\n     * @param _periods Number of periods between start time and end time\n     * @param _releaseStartTime Override time for when the releases start\n     * @param _revocable Whether the contract is revocable\n     */\n    function createTokenLockWallet(\n        address _owner,\n        address _beneficiary,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        IMoxieTokenLock.Revocability _revocable\n    ) external override onlyOwner {\n        require(_token.balanceOf(address(this)) >= _managedAmount, \"Not enough tokens to create lock\");\n\n        // Create contract using a minimal proxy and call initializer\n        bytes memory initializer = abi.encodeWithSelector(\n            MoxieTokenLockWallet.initialize.selector,\n            address(this),\n            _owner,\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        address contractAddress = _deployProxy2(keccak256(initializer), masterCopy, initializer);\n\n        // Send managed amount to the created contract\n        _token.safeTransfer(contractAddress, _managedAmount);\n\n        // mint MoxiePassToken to the newly created token lock wallet contract\n        // this will ensure that token lock wallet is whitelisted and can interact with in Moxie protocol contracts.\n        _moxiePassToken.mint(contractAddress) ;\n\n        emit TokenLockCreated(\n            contractAddress,\n            keccak256(initializer),\n            _beneficiary,\n            address(_token),\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        \n    }\n\n    // -- Funds Management --\n\n    /**\n     * @notice Gets the MOXIE token address\n     * @return Token used for transfers and approvals\n     */\n    function token() external view override returns (IERC20) {\n        return _token;\n    }\n\n    /**\n     * @notice Deposits tokens into the contract\n     * @dev Even if the ERC20 token can be transferred directly to the contract\n     * this function provide a safe interface to do the transfer and avoid mistakes\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount) external override {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraws tokens from the contract\n     * @dev Escape hatch in case of mistakes or to recover remaining funds\n     * @param _amount Amount of tokens to withdraw\n     */\n    function withdraw(uint256 _amount) external override onlyOwner {\n        require(_amount > 0, \"Amount cannot be zero\");\n        _token.safeTransfer(msg.sender, _amount);\n        emit TokensWithdrawn(msg.sender, _amount);\n    }\n\n    // -- Token Destinations --\n\n    /**\n     * @notice Adds an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function addTokenDestination(address _dst) external override onlyOwner {\n        require(_dst != address(0), \"Destination cannot be zero\");\n        require(_tokenDestinations.add(_dst), \"Destination already added\");\n        emit TokenDestinationAllowed(_dst, true);\n    }\n\n    /**\n     * @notice Removes an address that can be allowed by a token lock to pull funds\n     * @param _dst Destination address\n     */\n    function removeTokenDestination(address _dst) external override onlyOwner {\n        require(_tokenDestinations.remove(_dst), \"Destination already removed\");\n        emit TokenDestinationAllowed(_dst, false);\n    }\n\n    /**\n     * @notice Returns True if the address is authorized to be a destination of tokens\n     * @param _dst Destination address\n     * @return True if authorized\n     */\n    function isTokenDestination(address _dst) external view override returns (bool) {\n        return _tokenDestinations.contains(_dst);\n    }\n\n    /**\n     * @notice Returns an array of authorized destination addresses\n     * @return Array of addresses authorized to pull funds from a token lock\n     */\n    function getTokenDestinations() external view override returns (address[] memory) {\n        address[] memory dstList = new address[](_tokenDestinations.length());\n        for (uint256 i = 0; i < _tokenDestinations.length(); i++) {\n            dstList[i] = _tokenDestinations.at(i);\n        }\n        return dstList;\n    }\n\n    // -- Function Call Authorization --\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function setAuthFunctionCall(string calldata _signature, address _target) external override onlyOwner {\n        _setAuthFunctionCall(_signature, _target);\n    }\n\n    /**\n     * @notice Unsets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signature Function signature\n     */\n    function unsetAuthFunctionCall(string calldata _signature) external override onlyOwner {\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = address(0);\n\n        emit FunctionCallAuth(msg.sender, sigHash, address(0), _signature);\n    }\n\n    /**\n     * @notice Sets an authorized function call to target in bulk\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @param _signatures Function signatures\n     * @param _targets Address of the destination contract to call\n     */\n    function setAuthFunctionCallMany(\n        string[] calldata _signatures,\n        address[] calldata _targets\n    ) external override onlyOwner {\n        require(_signatures.length == _targets.length, \"Array length mismatch\");\n\n        for (uint256 i = 0; i < _signatures.length; i++) {\n            _setAuthFunctionCall(_signatures[i], _targets[i]);\n        }\n    }\n\n    /**\n     * @notice Sets an authorized function call to target\n     * @dev Input expected is the function signature as 'transfer(address,uint256)'\n     * @dev Function signatures of Graph Protocol contracts to be used are known ahead of time\n     * @param _signature Function signature\n     * @param _target Address of the destination contract to call\n     */\n    function _setAuthFunctionCall(string calldata _signature, address _target) internal {\n        require(_target != address(this), \"Target must be other contract\");\n        require(Address.isContract(_target), \"Target must be a contract\");\n\n        bytes4 sigHash = _toFunctionSigHash(_signature);\n        authFnCalls[sigHash] = _target;\n\n        emit FunctionCallAuth(msg.sender, sigHash, _target, _signature);\n    }\n\n    /**\n     * @notice Gets the target contract to call for a particular function signature\n     * @param _sigHash Function signature hash\n     * @return Address of the target contract where to send the call\n     */\n    function getAuthFunctionCallTarget(bytes4 _sigHash) public view override returns (address) {\n        return authFnCalls[_sigHash];\n    }\n\n    /**\n     * @notice Returns true if the function call is authorized\n     * @param _sigHash Function signature hash\n     * @return True if authorized\n     */\n    function isAuthFunctionCall(bytes4 _sigHash) external view override returns (bool) {\n        return getAuthFunctionCallTarget(_sigHash) != address(0);\n    }\n\n    /**\n     * @dev Converts a function signature string to 4-bytes hash\n     * @param _signature Function signature string\n     * @return Function signature hash\n     */\n    function _toFunctionSigHash(string calldata _signature) internal pure returns (bytes4) {\n        return _convertToBytes4(abi.encodeWithSignature(_signature));\n    }\n\n    /**\n     * @dev Converts function signature bytes to function signature hash (bytes4)\n     * @param _signature Function signature\n     * @return Function signature in bytes4\n     */\n    function _convertToBytes4(bytes memory _signature) internal pure returns (bytes4) {\n        require(_signature.length == 4, \"Invalid method signature\");\n        bytes4 sigHash;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sigHash := mload(add(_signature, 32))\n        }\n        return sigHash;\n    }\n\n    // -- Moxie pass  --\n\n     /**\n     * @notice Sets the MoxiePassToken contract address to mint on every token lock creation\n     * @param moxiePassToken_ Address of the MoxiePassToken contract\n     */\n    function setMoxiePassToken(address moxiePassToken_) public onlyOwner{\n        require(moxiePassToken_ != address(0), \"MoxiePassToken cannot be zero\");\n        _moxiePassToken = IERC721Mintable(moxiePassToken_);\n        emit MoxiePassTokenUpdated(moxiePassToken_);\n    }\n}\n"
    },
    "contracts/MoxieTokenLockSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"./MoxieTokenLock.sol\";\n\n/**\n * @title MoxieTokenLockSimple\n * @notice This contract is the concrete simple implementation built on top of the base\n * MoxieTokenLock functionality for use when we only need the token lock schedule\n * features but no interaction with the network.\n *\n * This contract is designed to be deployed without the use of a TokenManager.\n */\ncontract MoxieTokenLockSimple is MoxieTokenLock {\n    // Constructor\n    constructor() {\n        OwnableInitializable._initialize(msg.sender);\n    }\n\n    // Initializer\n    function initialize(\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external onlyOwner {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n    }\n}\n"
    },
    "contracts/MoxieTokenLockWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./MoxieTokenLock.sol\";\nimport \"./IMoxieTokenLockManager.sol\";\n\n/**\n * @title MoxieTokenLockWallet\n * @notice This contract is built on top of the base MoxieTokenLock functionality.\n * It allows wallet beneficiaries to use the deposited funds to perform specific function calls\n * on specific contracts.\n *\n * The idea is that supporters with locked tokens can participate in the protocol\n * but disallow any release before the vesting/lock schedule.\n * The beneficiary can issue authorized function calls to this contract that will\n * get forwarded to a target contract. A target contract is any of our protocol contracts.\n * The function calls allowed are queried to the MoxieTokenLockManager, this way\n * the same configuration can be shared for all the created lock wallet contracts.\n *\n * NOTE: Contracts used as target must have its function signatures checked to avoid collisions\n * with any of this contract functions.\n * Beneficiaries need to approve the use of the tokens to the protocol contracts. For convenience\n * the maximum amount of tokens is authorized.\n * Function calls do not forward ETH value so DO NOT SEND ETH TO THIS CONTRACT.\n */\ncontract MoxieTokenLockWallet is MoxieTokenLock {\n    using SafeMath for uint256;\n\n    // -- State --\n\n    IMoxieTokenLockManager public manager;\n    uint256 public usedAmount;\n\n    // -- Events --\n\n    event ManagerUpdated(address indexed _oldManager, address indexed _newManager);\n    event TokenDestinationsApproved();\n    event TokenDestinationsRevoked();\n\n    // Initializer\n    function initialize(\n        address _manager,\n        address _owner,\n        address _beneficiary,\n        address _token,\n        uint256 _managedAmount,\n        uint256 _startTime,\n        uint256 _endTime,\n        uint256 _periods,\n        uint256 _releaseStartTime,\n        uint256 _vestingCliffTime,\n        Revocability _revocable\n    ) external {\n        _initialize(\n            _owner,\n            _beneficiary,\n            _token,\n            _managedAmount,\n            _startTime,\n            _endTime,\n            _periods,\n            _releaseStartTime,\n            _vestingCliffTime,\n            _revocable\n        );\n        _setManager(_manager);\n    }\n\n    // -- Admin --\n\n    /**\n     * @notice Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function setManager(address _newManager) external onlyOwner {\n        _setManager(_newManager);\n    }\n\n    /**\n     * @dev Sets a new manager for this contract\n     * @param _newManager Address of the new manager\n     */\n    function _setManager(address _newManager) internal {\n        require(_newManager != address(0), \"Manager cannot be empty\");\n        require(Address.isContract(_newManager), \"Manager must be a contract\");\n\n        address oldManager = address(manager);\n        manager = IMoxieTokenLockManager(_newManager);\n\n        emit ManagerUpdated(oldManager, _newManager);\n    }\n\n    // -- Beneficiary --\n\n    /**\n     * @notice Approves protocol access of the tokens managed by this contract\n     * @dev Approves all token destinations registered in the manager to pull tokens\n     */\n    function approveProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            // Note this is only safe because we are using the max uint256 value\n            token.approve(dstList[i], type(uint256).max);\n        }\n        emit TokenDestinationsApproved();\n    }\n\n    /**\n     * @notice Revokes protocol access of the tokens managed by this contract\n     * @dev Revokes approval to all token destinations in the manager to pull tokens\n     */\n    function revokeProtocol() external onlyBeneficiary {\n        address[] memory dstList = manager.getTokenDestinations();\n        for (uint256 i = 0; i < dstList.length; i++) {\n            // Note this is only safe cause we're using 0 as the amount\n            token.approve(dstList[i], 0);\n        }\n        emit TokenDestinationsRevoked();\n    }\n\n    /**\n     * @notice Gets tokens currently available for release\n     * @dev Considers the schedule, takes into account already released tokens and used amount\n     * @return Amount of tokens ready to be released\n     */\n    function releasableAmount() public view override returns (uint256) {\n        if (revocable == Revocability.Disabled) {\n            return super.releasableAmount();\n        }\n\n        // -- Revocability enabled logic\n        // This needs to deal with additional considerations for when tokens are used in the protocol\n\n        // If a release start time is set no tokens are available for release before this date\n        // If not set it follows the default schedule and tokens are available on\n        // the first period passed\n        if (releaseStartTime > 0 && currentTime() < releaseStartTime) {\n            return 0;\n        }\n\n        // Vesting cliff is activated and it has not passed means nothing is vested yet\n        // so funds cannot be released\n        if (revocable == Revocability.Enabled && vestingCliffTime > 0 && currentTime() < vestingCliffTime) {\n            return 0;\n        }\n\n        // A beneficiary can never have more releasable tokens than the contract balance\n        // We consider the `usedAmount` in the protocol as part of the calculations\n        // the beneficiary should not release funds that are used.\n        uint256 releasable = availableAmount().sub(releasedAmount).sub(usedAmount);\n        return MathUtils.min(currentBalance(), releasable);\n    }\n\n    /**\n     * @notice Forward authorized contract calls to protocol con    tracts\n     * @dev Fallback function can be called by the beneficiary only if function call is allowed\n     */\n    // solhint-disable-next-line no-complex-fallback\n    fallback() external payable {\n        // Only beneficiary can forward calls\n        require(msg.sender == beneficiary, \"Unauthorized caller\");\n        require(msg.value == 0, \"ETH transfers not supported\");\n\n        // Function call validation\n        address _target = manager.getAuthFunctionCallTarget(msg.sig);\n        require(_target != address(0), \"Unauthorized function\");\n\n        uint256 oldBalance = currentBalance();\n\n        // Call function with data\n        Address.functionCall(_target, msg.data);\n\n        // Tracked used tokens in the protocol\n        // We do this check after balances were updated by the forwarded call\n        // Check is only enforced for revocable contracts to save some gas\n        if (revocable == Revocability.Enabled) {\n            // Track contract balance change\n            uint256 newBalance = currentBalance();\n            if (newBalance < oldBalance) { \n                // Outflow\n                uint256 diff = oldBalance.sub(newBalance);\n                usedAmount = usedAmount.add(diff);\n            } else {\n                // Inflow: We can receive profits from the protocol, that could make usedAmount to\n                // underflow. We set it to zero in that case.\n                uint256 diff = newBalance.sub(oldBalance);\n                usedAmount = (diff >= usedAmount) ? 0 : usedAmount.sub(diff);\n            }\n            require(usedAmount <= vestedAmount(), \"Cannot use more tokens than vested amount\");\n        }\n    }\n\n    /**\n     * @notice Receive function that always reverts.\n     * @dev Only included to supress warnings, see https://github.com/ethereum/solidity/issues/10159\n     */\n    receive() external payable {\n        revert(\"Bad call\");\n    }\n}\n"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The owner account will be passed on initialization of the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n    /// @dev Owner of the contract, can be retrieved with the public owner() function\n    address private _owner;\n    /// @dev Since upgradeable contracts might inherit this, we add a storage gap\n    /// to allow adding variables here without breaking the proxy storage layout\n    uint256[50] private __gap;\n\n    /// @dev Emitted when ownership of the contract is transferred\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function _initialize(address owner) internal {\n        _owner = owner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) external virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/tests/MoxiePassTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"../IERC721Mintable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MoxiePassTokenMock is ERC721, Ownable, IERC721Mintable {\n\n    uint256 private _tokenIdCounter;\n\n    constructor(string memory name, string memory symbol) ERC721(name, symbol) {\n        _tokenIdCounter = 0;\n    }\n\n    function mint(address to) public override {\n        _mint(to, _tokenIdCounter);\n        _tokenIdCounter += 1;\n    }\n}\n"
    },
    "contracts/tests/MoxieTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title Graph Token Mock contract.\n * @dev Used for testing purposes, DO NOT USE IN PRODUCTION\n */\ncontract MoxieTokenMock is Ownable, ERC20 {\n    /**\n     * @notice Contract Constructor.\n     * @param _initialSupply Initial supply\n     * @param _mintTo Address to whitch to mint the initial supply\n     */\n    constructor(uint256 _initialSupply, address _mintTo) ERC20(\"Moxie Token Mock\", \"MOX-Mock\") {\n        // Deploy to mint address\n        _mint(_mintTo, _initialSupply);\n    }\n\n    /**\n     * @notice Burn tokens from an address\n     * @param _from Address to burn tokens from\n     * @param _amount Amount of tokens to burn\n     */\n    function burn(address _from, uint256 _amount) external {\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/tests/Stakes.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\n/**\n * @title A collection of data structures and functions to manage the Indexer Stake state.\n *        Used for low-level state changes, require() conditions should be evaluated\n *        at the caller function scope.\n */\nlibrary Stakes {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    struct Indexer {\n        uint256 tokensStaked; // Tokens on the indexer stake (staked by the indexer)\n        uint256 tokensAllocated; // Tokens used in allocations\n        uint256 tokensLocked; // Tokens locked for withdrawal subject to thawing period\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\n    }\n\n    /**\n     * @dev Deposit tokens to the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to deposit\n     */\n    function deposit(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.add(_tokens);\n    }\n\n    /**\n     * @dev Release tokens from the indexer stake.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to release\n     */\n    function release(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensStaked = stake.tokensStaked.sub(_tokens);\n    }\n\n    /**\n     * @dev Allocate tokens from the main stack to a SubgraphDeployment.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to allocate\n     */\n    function allocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.add(_tokens);\n    }\n\n    /**\n     * @dev Unallocate tokens from a SubgraphDeployment back to the main stack.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unallocate\n     */\n    function unallocate(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensAllocated = stake.tokensAllocated.sub(_tokens);\n    }\n\n    /**\n     * @dev Lock tokens until a thawing period pass.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _period Period in blocks that need to pass before withdrawal\n     */\n    function lockTokens(Stakes.Indexer storage stake, uint256 _tokens, uint256 _period) internal {\n        // Take into account period averaging for multiple unstake requests\n        uint256 lockingPeriod = _period;\n        if (stake.tokensLocked > 0) {\n            lockingPeriod = stake.getLockingPeriod(_tokens, _period);\n        }\n\n        // Update balances\n        stake.tokensLocked = stake.tokensLocked.add(_tokens);\n        stake.tokensLockedUntil = block.number.add(lockingPeriod);\n    }\n\n    /**\n     * @dev Unlock tokens.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unkock\n     */\n    function unlockTokens(Stakes.Indexer storage stake, uint256 _tokens) internal {\n        stake.tokensLocked = stake.tokensLocked.sub(_tokens);\n        if (stake.tokensLocked == 0) {\n            stake.tokensLockedUntil = 0;\n        }\n    }\n\n    /**\n     * @dev Take all tokens out from the locked stake for withdrawal.\n     * @param stake Stake data\n     * @return Amount of tokens being withdrawn\n     */\n    function withdrawTokens(Stakes.Indexer storage stake) internal returns (uint256) {\n        // Calculate tokens that can be released\n        uint256 tokensToWithdraw = stake.tokensWithdrawable();\n\n        if (tokensToWithdraw > 0) {\n            // Reset locked tokens\n            stake.unlockTokens(tokensToWithdraw);\n\n            // Decrease indexer stake\n            stake.release(tokensToWithdraw);\n        }\n\n        return tokensToWithdraw;\n    }\n\n    /**\n     * @dev Get the locking period of the tokens to unstake.\n     * If already unstaked before calculate the weighted average.\n     * @param stake Stake data\n     * @param _tokens Amount of tokens to unstake\n     * @param _thawingPeriod Period in blocks that need to pass before withdrawal\n     * @return True if staked\n     */\n    function getLockingPeriod(\n        Stakes.Indexer memory stake,\n        uint256 _tokens,\n        uint256 _thawingPeriod\n    ) internal view returns (uint256) {\n        uint256 blockNum = block.number;\n        uint256 periodA = (stake.tokensLockedUntil > blockNum) ? stake.tokensLockedUntil.sub(blockNum) : 0;\n        uint256 periodB = _thawingPeriod;\n        uint256 stakeA = stake.tokensLocked;\n        uint256 stakeB = _tokens;\n        return periodA.mul(stakeA).add(periodB.mul(stakeB)).div(stakeA.add(stakeB));\n    }\n\n    /**\n     * @dev Return true if there are tokens staked by the Indexer.\n     * @param stake Stake data\n     * @return True if staked\n     */\n    function hasTokens(Stakes.Indexer memory stake) internal pure returns (bool) {\n        return stake.tokensStaked > 0;\n    }\n\n    /**\n     * @dev Return the amount of tokens used in allocations and locked for withdrawal.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensUsed(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAllocated.add(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Return the amount of tokens staked not considering the ones that are already going\n     * through the thawing period or are ready for withdrawal. We call it secure stake because\n     * it is not subject to change by a withdraw call from the indexer.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensSecureStake(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensStaked.sub(stake.tokensLocked);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for any purpose.\n     * Any token that is allocated cannot be used as well as tokens that are going through the\n     * thawing period or are withdrawable\n     * Calc: tokensStaked - tokensAllocated - tokensLocked\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensAvailable(Stakes.Indexer memory stake) internal pure returns (uint256) {\n        return stake.tokensAvailableWithDelegation(0);\n    }\n\n    /**\n     * @dev Tokens free balance on the indexer stake that can be used for allocations.\n     * This function accepts a parameter for extra delegated capacity that takes into\n     * account delegated tokens\n     * @param stake Stake data\n     * @param _delegatedCapacity Amount of tokens used from delegators to calculate availability\n     * @return Token amount\n     */\n    function tokensAvailableWithDelegation(\n        Stakes.Indexer memory stake,\n        uint256 _delegatedCapacity\n    ) internal pure returns (uint256) {\n        uint256 tokensCapacity = stake.tokensStaked.add(_delegatedCapacity);\n        uint256 _tokensUsed = stake.tokensUsed();\n        // If more tokens are used than the current capacity, the indexer is overallocated.\n        // This means the indexer doesn't have available capacity to create new allocations.\n        // We can reach this state when the indexer has funds allocated and then any\n        // of these conditions happen:\n        // - The delegationCapacity ratio is reduced.\n        // - The indexer stake is slashed.\n        // - A delegator removes enough stake.\n        if (_tokensUsed > tokensCapacity) {\n            // Indexer stake is over allocated: return 0 to avoid stake to be used until\n            // the overallocation is restored by staking more tokens, unallocating tokens\n            // or using more delegated funds\n            return 0;\n        }\n        return tokensCapacity.sub(_tokensUsed);\n    }\n\n    /**\n     * @dev Tokens available for withdrawal after thawing period.\n     * @param stake Stake data\n     * @return Token amount\n     */\n    function tokensWithdrawable(Stakes.Indexer memory stake) internal view returns (uint256) {\n        // No tokens to withdraw before locking period\n        if (stake.tokensLockedUntil == 0 || block.number < stake.tokensLockedUntil) {\n            return 0;\n        }\n        return stake.tokensLocked;\n    }\n}\n"
    },
    "contracts/tests/StakingMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.3;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./Stakes.sol\";\n\ncontract StakingMock {\n    using SafeMath for uint256;\n    using Stakes for Stakes.Indexer;\n\n    // -- State --\n\n    uint256 public minimumIndexerStake = 100e18;\n    uint256 public thawingPeriod = 10; // 10 blocks\n    IERC20 public token;\n\n    // Indexer stakes : indexer => Stake\n    mapping(address => Stakes.Indexer) public stakes;\n\n    /**\n     * @dev Emitted when `indexer` stake `tokens` amount.\n     */\n    event StakeDeposited(address indexed indexer, uint256 tokens);\n\n    /**\n     * @dev Emitted when `indexer` unstaked and locked `tokens` amount `until` block.\n     */\n    event StakeLocked(address indexed indexer, uint256 tokens, uint256 until);\n\n    /**\n     * @dev Emitted when `indexer` withdrew `tokens` staked.\n     */\n    event StakeWithdrawn(address indexed indexer, uint256 tokens);\n\n    // Contract constructor.\n    constructor(IERC20 _token) {\n        require(address(_token) != address(0), \"!token\");\n        token = _token;\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _tokens Amount of tokens to stake\n     */\n    function stake(uint256 _tokens) external {\n        stakeTo(msg.sender, _tokens);\n    }\n\n    /**\n     * @dev Deposit tokens on the indexer stake.\n     * @param _indexer Address of the indexer\n     * @param _tokens Amount of tokens to stake\n     */\n    function stakeTo(address _indexer, uint256 _tokens) public {\n        require(_tokens > 0, \"!tokens\");\n\n        // Ensure minimum stake\n        require(stakes[_indexer].tokensSecureStake().add(_tokens) >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Transfer tokens to stake from caller to this contract\n        require(token.transferFrom(msg.sender, address(this), _tokens), \"!transfer\");\n\n        // Stake the transferred tokens\n        _stake(_indexer, _tokens);\n    }\n\n    /**\n     * @dev Unstake tokens from the indexer stake, lock them until thawing period expires.\n     * @param _tokens Amount of tokens to unstake\n     */\n    function unstake(uint256 _tokens) external {\n        address indexer = msg.sender;\n        Stakes.Indexer storage indexerStake = stakes[indexer];\n\n        require(_tokens > 0, \"!tokens\");\n        require(indexerStake.hasTokens(), \"!stake\");\n        require(indexerStake.tokensAvailable() >= _tokens, \"!stake-avail\");\n\n        // Ensure minimum stake\n        uint256 newStake = indexerStake.tokensSecureStake().sub(_tokens);\n        require(newStake == 0 || newStake >= minimumIndexerStake, \"!minimumIndexerStake\");\n\n        // Before locking more tokens, withdraw any unlocked ones\n        uint256 tokensToWithdraw = indexerStake.tokensWithdrawable();\n        if (tokensToWithdraw > 0) {\n            _withdraw(indexer);\n        }\n\n        indexerStake.lockTokens(_tokens, thawingPeriod);\n\n        emit StakeLocked(indexer, indexerStake.tokensLocked, indexerStake.tokensLockedUntil);\n    }\n\n    /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     */\n    function withdraw() external {\n        _withdraw(msg.sender);\n    }\n\n    function _stake(address _indexer, uint256 _tokens) internal {\n        // Deposit tokens into the indexer stake\n        Stakes.Indexer storage indexerStake = stakes[_indexer];\n        indexerStake.deposit(_tokens);\n\n        emit StakeDeposited(_indexer, _tokens);\n    }\n\n    /**\n     * @dev Withdraw indexer tokens once the thawing period has passed.\n     * @param _indexer Address of indexer to withdraw funds from\n     */\n    function _withdraw(address _indexer) private {\n        // Get tokens available for withdraw and update balance\n        uint256 tokensToWithdraw = stakes[_indexer].withdrawTokens();\n        require(tokensToWithdraw > 0, \"!tokens\");\n\n        // Return tokens to the indexer\n        require(token.transfer(_indexer, tokensToWithdraw), \"!transfer\");\n\n        emit StakeWithdrawn(_indexer, tokensToWithdraw);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}